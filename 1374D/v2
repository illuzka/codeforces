from time import sleep
import unittest
from time import sleep


# data = [2, 2]
# k = 2



def do(k, data):
    if all([i % k == 0 for i in data]):
        return 0

    data_length = len(data)
    x = 0
    done = False
    done_indexes = set()

    while not done:
        i = 0
        while i < len(data):
            if data[i] % k == 0:
                done_indexes.add(i)
            else:
                if (data[i] + x) % k == 0:
                    data[i] += x
                    done_indexes.add(i)
                    break
            i += 1
        x += 1

        if len(done_indexes) == data_length:
            return x



# print(do(k, data))




















class ZeroRemainderArrayTesting(unittest.TestCase):


    def test_first(self):
        result = do(3, [1, 2, 1, 3])
        self.assertEqual(result, 6)

    def test_second(self):
        result = do(6, [8, 7, 1, 8, 3, 7, 5, 10, 8, 9])
        self.assertEqual(result, 18)

    def test_third(self):
        result = do(10, [20 ,100, 50 ,20, 100500])
        self.assertEqual(result, 0)

    def test_fourth(self):
        result = do(25, [24, 24, 24, 24 ,24, 24, 24 ,24 ,24 ,24])
        self.assertEqual(result, 227)

    def test_fifth(self):
        result = do(8, [1, 2, 3, 4, 5, 6, 7, 8])
        self.assertEqual(result, 8)


#
#
unittest.main()








